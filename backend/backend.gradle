
buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${versions.spring_boot}"
        classpath "gradle.plugin.com.benjaminsproule:swagger-gradle-plugin:${versions.swagger_gradle_plugin}"
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.benjaminsproule.swagger'


group = 'net.wohlfart'
version = "${versions.apollo}"
sourceCompatibility = 1.8

dependencyManagement {
    imports {
        mavenBom "org.springframework:spring-framework-bom:${versions.spring_framework_bom}"
    }
}

// make sure the frontend is compiled and in mavenLocal
jar.dependsOn(':frontend:publishWebJarPublicationToMavenLocal')

dependencies {
    implementation        "net.wohlfart.apollo:frontend:${versions.apollo}"             // the frontend webjar

    // spring
    // implementation        "org.springframework.boot:spring-boot-starter-web"
    implementation        "org.springframework.boot:spring-boot-starter-webflux"
    implementation        "org.springframework.boot:spring-boot-starter-actuator"
    implementation        "org.springframework.boot:spring-boot-starter-security"
    // implementation        "org.springframework.boot:spring-boot-starter-jetty"


    // springfox
    implementation        "io.springfox:springfox-swagger2:${versions.springfox}"
    implementation        "io.springfox:springfox-spring-webflux:${versions.springfox}"
    implementation        "io.springfox:springfox-swagger-ui:${versions.springfox}"

    // spring security for mvc
    // implementation        "org.springframework.security.oauth:spring-security-oauth2:${versions.spring_oauth2}"
    implementation        "org.springframework.security:spring-security-oauth2-client"
    implementation        "org.springframework.security:spring-security-oauth2-jose"

    // redhat
    implementation        "org.jboss.resteasy:resteasy-client:${versions.resteasy}"
    implementation        "org.jboss.resteasy:resteasy-jackson2-provider:${versions.resteasy}"
    // implementation      'org.keycloak:keycloak-spring-boot-starter'
    implementation        "org.keycloak:keycloak-admin-client:${versions.keycloak}"
    // implementation      'org.springframework.boot:spring-boot-starter-jersey'

    // misc
    implementation        "com.h2database:h2"  // used in the default profile
    implementation        'org.webjars:webjars-locator-core'
    implementation        "com.google.guava:guava:${versions.guava}"

    // some strange config for annotation processing
    compileOnly           "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor   "org.projectlombok:lombok:${versions.lombok}"
    compileOnly           "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor   "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation    'org.springframework.boot:spring-boot-starter-test'
    testImplementation    'org.springframework.security:spring-security-test'
    testImplementation    'io.projectreactor:reactor-test'
}


springBoot {
    mainClassName = 'net.wohlfart.apollo.BackendServerApplication'
}

clean.doFirst {
    delete "${projectDir}/out" // from idea
}

task MrProper {
    dependsOn(clean)
    delete "${projectDir}/.gradle"  // might not work on windows
}


// see: https://github.com/gigaSproule/swagger-gradle-plugin
swagger {
    File apiDefinitionPath = file("${rootProject.ext.apiDefinitionPath}")
    apiSource {
        locations = [
            "net.wohlfart.apollo.config",
            "net.wohlfart.apollo.keycloak"
        ]
        swaggerDirectory = apiDefinitionPath.parentFile
        swaggerFileName = apiDefinitionPath.name.take(apiDefinitionPath.name.lastIndexOf('.'))

        springmvc = true
        schemes = ['http', 'https']
        basePath = '/api'

        info {
            title = 'Apollo API'
            description = 'The Apollo API.'
            version = '1.0'
            license {
                url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                name = 'Apache 2.0'
            }
        }
        // securityDefinition {
        //    type = 'oauth2'
        //    name = 'implicit'
        //    flow = ''
        // }
        // swaggerApiReader = 'com.github.kongchen.swagger.docgen.reader.SwaggerReader'
        // modelConverters = [ 'io.swagger.validator.BeanValidator' ]
    }
}
