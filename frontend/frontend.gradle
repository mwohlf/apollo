import io.swagger.codegen.DefaultGenerator

buildscript {
    dependencies {
        // see: https://github.com/thebignet/swagger-codegen-gradle-plugin-example
        classpath("io.swagger:swagger-codegen:${versions.swagger_codegen}")
    }
}

plugins {
    // https://plugins.gradle.org/plugin/com.github.node-gradle.node
    id "com.github.node-gradle.node" version "1.3.0"
}

apply plugin: 'base'
apply plugin: 'com.github.node-gradle.node'


node {
    download = true
    version = "${versions.node}"
    npmVersion = "${versions.npm}"
    yarnVersion = "${versions.yarn}"
    // workDir = file("${projectDir}/.gradle/node")
    // nodeModulesDir = file("${project.projectDir}")
}


// this is NOT triggered by the backend,
task generateApi {
    group "API Generation"
    description "Create angular API from the swagger definition in ${rootProject.ext.apiDefinitionPath}"

    inputs.files(file("${rootProject.ext.apiDefinitionPath}"))
    outputs.dir(file("${projectDir}/src/generated"))

    doLast {
        //noinspection UnnecessaryQualifiedReference
        def config = new io.swagger.codegen.config.CodegenConfigurator()
        config.setInputSpec("file:///${rootProject.ext.apiDefinitionPath}")
        config.setOutputDir("${projectDir}/src/generated")
        config.setLang('typescript-angular')
        config.setVerbose(false)
        config.setAdditionalProperties([
            'basePath': 'http://localhost:8080'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task yarnInstall(type: YarnTask) {
    group "Frontend Generation"
    description "install frontend dependencies"
    dependsOn yarnSetup
    args = ['install']
}

task yarnRunBuild(type: YarnTask) {
    group "Frontend Generation"
    description "install frontend dependencies"
    dependsOn yarnSetup
    args = ['run', 'build']   // compiles into build/resources. the output dir in package.json for "ng build"
}

configurations {
    webjar
}

// see: https://discuss.gradle.org/t/creating-a-webjar-gradle-upload-does-not-create-maven-metadata-xml/1480
// gradle webjar creates
task webjar(type: Zip) {
    group "Artifact Generation"
    description "assemble the maven artifact"

    extension 'jar'
    classifier 'webjar'
    dependsOn generateApi
    dependsOn yarnInstall
    dependsOn yarnRunBuild
    // default is to build into /dist, however we want it gradle style, also need to change the path in angular.json
    from(fileTree("build/resources")) {  // this is configured in package.json
        // into "META-INF/resources/webjars" // must match WebJarsResourceResolver.WEBJARS_LOCATION
        into "META-INF/resources" // must match WebJarsResourceResolver.WEBJARS_LOCATION
    }
    outputs.file archivePath
}

artifacts {
    webjar(webjar.archivePath) {
        type 'jar'
        builtBy webjar
    }
}

task MrProper {
    dependsOn(clean)
    doLast {
        delete "${projectDir}/src/generated"
        delete "${projectDir}/dist"                 // moved to build/dist in angular.json
        delete "${projectDir}/.gradle"
        delete "${projectDir}/node_modules"
    }
}

